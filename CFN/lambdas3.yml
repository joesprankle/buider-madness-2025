AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for image upload lambda function with S3 bucket (Python)'

Resources:
  # S3 bucket to store uploaded images
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'image-uploads-${AWS::AccountId}-${AWS::Region}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*'] # Restrict this to your domain in production
            MaxAge: 3600

  # IAM role for the Lambda function
  ImageUploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3ImageUploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${ImageBucket}/*'

  # Lambda function to handle image uploads (Python)
  ImageUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ImageUploadProcessor
      Handler: index.lambda_handler
      Role: !GetAtt ImageUploadLambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket
      Code:
        ZipFile: |
          import json
          import base64
          import boto3
          import os
          import logging
          from datetime import datetime

          # Set up logger
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize S3 client
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  # Log the event for debugging
                  logger.info(f"Received event: {event}")
                  
                  # Get environment variables
                  bucket_name = os.environ.get('BUCKET_NAME')
                  logger.info(f"Using bucket: {bucket_name}")
                  
                  # Parse the request body
                  try:
                      if 'body' in event:
                          body = json.loads(event['body'])
                      else:
                          logger.error("No body in event")
                          body = {}
                  except json.JSONDecodeError as e:
                      logger.error(f"JSON parsing error: {str(e)}")
                      return {
                          'statusCode': 400,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({'error': 'Invalid JSON in request body'})
                      }
                  
                  # Get image data
                  base64_image = body.get('image')
                  if not base64_image:
                      logger.error("No image data in request")
                      return {
                          'statusCode': 400,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({'error': 'No image data provided'})
                      }
                  
                  filename = body.get('filename', f"image-{int(datetime.now().timestamp())}")
                  content_type = body.get('contentType', 'image/jpeg')
                  logger.info(f"Processing image with filename: {filename}, content_type: {content_type}")
                  
                  # Remove data URL prefix if present (e.g., data:image/jpeg;base64,)
                  try:
                      if ',' in base64_image:
                          base64_image = base64_image.split(',', 1)[1]
                  except Exception as e:
                      logger.error(f"Error processing data URL: {str(e)}")
                      return {
                          'statusCode': 400,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({'error': 'Invalid image data format'})
                      }
                  
                  # Decode base64 image
                  try:
                      image_data = base64.b64decode(base64_image)
                      logger.info(f"Successfully decoded image, size: {len(image_data)} bytes")
                  except Exception as e:
                      logger.error(f"Base64 decoding error: {str(e)}")
                      return {
                          'statusCode': 400,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({'error': 'Invalid base64 encoding'})
                      }
                  
                  # Upload to S3 WITHOUT ACL parameter
                  try:
                      response = s3.put_object(
                          Bucket=bucket_name,
                          Key=filename,
                          Body=image_data,
                          ContentType=content_type,
                          ContentDisposition='inline'
                          # Removed ACL='public-read' parameter
                      )
                      logger.info(f"S3 upload successful: {response}")
                  except Exception as e:
                      logger.error(f"S3 upload error: {str(e)}")
                      return {
                          'statusCode': 500,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({
                              'error': 'Failed to upload to S3',
                              'details': str(e)
                          })
                      }
                  
                  # Generate URL for the uploaded image
                  image_url = f"https://{bucket_name}.s3.amazonaws.com/{filename}"
                  logger.info(f"Image URL: {image_url}")
                  
                  # Return success response
                  return {
                      'statusCode': 200,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'message': 'Image uploaded successfully',
                          'imageUrl': image_url,
                          'filename': filename
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Unexpected error: {str(e)}")
                  
                  # Return error response
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'error': 'Failed to process image upload',
                          'details': str(e)
                      })
                  }

  # Lambda Function URL configuration
  ImageUploadFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt ImageUploadFunction.Arn
      Cors:
        AllowOrigins: ['*'] # Restrict to your domain in production
        AllowMethods: [POST]
        AllowHeaders: ['*']
        MaxAge: 3600

  # Lambda permission to allow function URL invocations
  ImageUploadFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageUploadFunction
      Action: 'lambda:InvokeFunctionUrl'
      Principal: '*'
      FunctionUrlAuthType: NONE

Outputs:
  BucketName:
    Description: 'S3 bucket for storing uploaded images'
    Value: !Ref ImageBucket
  
  FunctionUrl:
    Description: 'URL endpoint for the image upload Lambda function'
    Value: !GetAtt ImageUploadFunctionUrl.FunctionUrl